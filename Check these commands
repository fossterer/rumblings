1) How to generate /etc/udev/rules.d/70-persistent-net.rules:

sudo INTERFACE=eth0 udevadm test --action=add /sys/class/net/eth0
etc...

command to force:   sudo udevadm trigger

I tend to reboot after.


2)install doc-linux-html


3)  Most mainboard manufacturers who ship boards with UEFI Boot also provide a BIOS Image which can be installed and the board will boot Linux without modification. 


4) xrandr -- for Display details

5) ufw -- uncomplicated Firewall

6) tmux - Terminal Multiplexer

7) preload -- Ubuntu speed enhancer (& default in ElementaryOS)

8) #ubuntu-bugs - IRC channel

9) apt-cache policy flashplugin-installer

10) -- BIG LIST --
	
Some Useful Command Line Tips For Linux  
----------------------------------------
 
Here is a compilation of selected command-line tips that can help in time savings that will increase your productivity.

Unlike Windows, where users prefer operating the GUI way rather than the command line prompt, the open source Linux comes with its own benefits of using the command line feature. There are techniques that everybody knows and there are the lesser known ones that are generally important or useful for technical users. Here's a compilation of selected command-line tips that can help in time savings that will increase your productivity...

To get more details on a command mentioned, first try "man".

> Basics

* Learning basic bash could prove to be really beneficial. It’s pretty easy to follow and not that long. Alternate shells can be nice, but bash is powerful and always available.

* Get updated with Vim. There's really no competition for random Linux editing (even if you use Emacs or Eclipse most of the time).

* Know SSH, and the basics of passwordless authentication, via SH-agent, SSH-add, etc.

* Basic file management: ls and ls -l (in particular, learn what every column in 'ls -l' means), less, head, tail and tail -f, ln and ln -s (learn the differences and advantages of hard versus soft links), chown, chmod, du (for a quick summary of disk usage: du -sk *), df, mount.

* Basic network management thorugh ip or ifconfig, dig, will come handy for network troubleshooting.

* Know regular expressions well, and the various flags to grep/egrep. The -o, -A, and -B options are worth knowing. 

Everyday use

* In bash, use Ctrl-R to search through command history.

* In bash, use Ctrl-W to kill the last word, and Ctrl-U to kill the line. 

* To go back to the previous working directory: cd -

* Use xargs (or parallel) since it is very powerful. You can control how many items execute per line (-L) as well as parallelism (-P). If you’re not sure if it’ll do the right thing, use,xargs echo first. Also, -I{} is handy. Examples:


find . -name \*.py | xargs grep some_function

cat hosts | xargs -I{} ssh root@{} hostname


* pstree -p gives a detailed display of the process tree.

* Use pgrep and pkill to find or signal processes by name (-f is helpful).

* Know the various signals you can send processes. For example, to suspend a process, use kill -STOP [pid].

* Use nohup or disown if you want a background process to keep running forever.

* You can keep a tab over what processes are listening via netstat -lntp. 

* In bash scripts, use set -x for debugging output. Use set -e to abort errors. 

* In bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory. Example:.

# do something in current dir

(cd /some/other/dir; other-command)

# continue in original dir

* The output of a command can be treated like a file via <(some command). For example, compare local /etc/hosts with a remote one: diff /etc/hosts <(ssh somehost cat /etc/hosts)

* In bash, redirect both standard output and standard error via: some-command >logfile 2>&1. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add “
* Use man ascii for a good ASCII table, with hex and decimal values.

* On remote ssh sessions, use screen or dtach to save your session, in case it is interrupted.

* For Web debugging, curl and curl -I are handy, and/or their wget equivalents.

* To convert HTML to text: lynx -dump -stdin

* To handle XML, xmlstarlet is good.

* In ssh, knowing how to port tunnel with -L or -D (and occasionally -R) is useful. Example, to access websites from a remote server.

* It can be useful to make a few optimisations to your ssh configuration. For instance, this .ssh/config contains settings to avoid dropped connections in certain network environments, not require confirmation connecting to new hosts, forward authentication, and use compression (which is helpful with scp over low-bandwidth connections):

TCPKeepAlive=yes

ServerAliveInterval=15

ServerAliveCountMax=6

StrictHostKeyChecking=no

Compression=yes

ForwardAgent=yes

* If you are halfway through typing a command but change your mind, hit Alt-# to add a # at the beginning and enter it as a comment (or use Ctrl-A, #, enter). You can then return to it later via command history.

System debugging

* To know disk/cpu/network status, use iostat, netstat, top (or the better htop), and (especially) dstat. These commands are good for getting a quick idea of what’s happening on a system.

* To know memory status, run and understand the output of free and vmstat. Specifically, be aware the 'cached' value is memory held by the Linux kernel as file cache, so effectively counts toward the 'free' value.

* Java system debugging is different, but a simple trick on Sun's and some other Java Virtual Machines (JVMs) is that you can run kill -3 and a full stack trace and heap summary will be dumped to stderr/logs.

* Use mtr as a better traceroute, to identify network issues.

* To find which socket or process is using bandwidth, try iftop or nethogs.

* For more serious network debugging, wireshark or tshark.

* The strace (with-p) command can be helpful if a program is failing, hanging, or crashing, and you don’t know why.

* When debugging why something went wrong in the past, sar can be very helpful. It shows historic statistics on CPU, memory, network, etc.

* Use dmesg whenever something’s acting really funny, like any hardware or driver issue.

(This story is a part of EFY Archives) 

  -- THE END --

11) "GRUB_RECORDFAIL_TIMEOUT" in "/etc/default/grub"

12) "apt-cache policy <pkg_name>" returns the installed version and available versions of 'pkg_name'

13) Alternatives to Instagram:
   --------------------------

	1. Anypic 
	2. VintageJS 
	3. CamanJS 
